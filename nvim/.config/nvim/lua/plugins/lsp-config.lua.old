local util = require("lspconfig.util")

return {
  "neovim/nvim-lspconfig",
  dependencies = {
    "hrsh7th/cmp-nvim-lsp", -- Doit être déclaré ici
    "williamboman/mason-lspconfig.nvim",
  },
  opts = {
    inlay_hints = { enabled = true },
    diagnostics = { virtual_text = false },
    servers = {
      -- Serveur de langage pour Angular
      angularls = {
        filetypes = { "typescript", "html", "typescriptreact", "typescript.tsx" },
        cmd = {
          "ngserver",
          "--stdio",
          "--tsProbeLocations",
          "node_modules/@angular/language-service",
          "--ngProbeLocations",
          "node_modules/@angular/language-service",
        },
        capabilities = require("cmp_nvim_lsp").default_capabilities(vim.lsp.protocol.make_client_capabilities()),
        on_attach = function(client, bufnr)
          -- Vos mappings personnalisés ici
          vim.keymap.set("n", "gd", vim.lsp.buf.definition, { buffer = bufnr, desc = "Go to definition" })
          vim.keymap.set("n", "gr", vim.lsp.buf.references, { buffer = bufnr, desc = "Show references" })
        end,
        on_new_config = function(new_config)
          new_config.cmd = {
            "node_modules/.bin/ngserver",
            "--stdio",
            "--tsProbeLocations",
            "node_modules/@angular/language-service",
            "--ngProbeLocations",
            "node_modules/@angular/language-service",
          }
        end,
      },
      -- Serveur de langage pour Vue (Volar)
      -- Install npm install -g @vue/language-server
      -- Install npm install -g @vue/typescript-plugin
      volar = {
        filetypes = {
          "typescript",
          "vue",
        },
        root_dir = util.root_pattern("src/App.vue"),
      },
      -- Serveur de langage pour React (tsserver)
      tsserver = { enabled = false },
      -- Désactiver les serveurs inutiles pour éviter les conflits
      ts_ls = {
        enabled = false,
      },
      vtsls = {
        -- explicitly add default filetypes, so that we can extend
        -- them in related extras
        filetypes = {
          "javascript",
          "javascriptreact",
          "javascript.jsx",
          "typescript",
          "typescriptreact",
          "typescript.tsx",
        },
        settings = {
          complete_function_calls = true,
          vtsls = {
            enableMoveToFileCodeAction = true,
            autoUseWorkspaceTsdk = true,
            experimental = {
              maxInlayHintLength = 30,
              completion = {
                enableServerSideFuzzyMatch = true,
              },
            },
          },
          typescript = {
            updateImportsOnFileMove = { enabled = "always" },
            suggest = {
              completeFunctionCalls = true,
            },
            inlayHints = {
              enumMemberValues = { enabled = true },
              functionLikeReturnTypes = { enabled = true },
              parameterNames = { enabled = "literals" },
              parameterTypes = { enabled = true },
              propertyDeclarationTypes = { enabled = true },
              variableTypes = { enabled = false },
            },
          },
        },
        keys = {
          {
            "gD",
            function()
              local params = vim.lsp.util.make_position_params()
              LazyVim.lsp.execute({
                command = "typescript.goToSourceDefinition",
                arguments = { params.textDocument.uri, params.position },
                open = true,
              })
            end,
            desc = "Goto Source Definition",
          },
          {
            "gR",
            function()
              LazyVim.lsp.execute({
                command = "typescript.findAllFileReferences",
                arguments = { vim.uri_from_bufnr(0) },
                open = true,
              })
            end,
            desc = "File References",
          },
          {
            "<leader>co",
            LazyVim.lsp.action["source.organizeImports"],
            desc = "Organize Imports",
          },
          {
            "<leader>cM",
            LazyVim.lsp.action["source.addMissingImports.ts"],
            desc = "Add missing imports",
          },
          {
            "<leader>cu",
            LazyVim.lsp.action["source.removeUnused.ts"],
            desc = "Remove unused imports",
          },
          {
            "<leader>cD",
            LazyVim.lsp.action["source.fixAll.ts"],
            desc = "Fix all diagnostics",
          },
          {
            "<leader>cV",
            function()
              LazyVim.lsp.execute({ command = "typescript.selectTypeScriptVersion" })
            end,
            desc = "Select TS workspace version",
          },
        },
      },

      htmx = { enabled = false },
      cssmodules_ls = { enabled = false },
      tailwindcss = { enabled = false },
      emmet_language_server = {
        filetypes = {
          "css",
          "eruby",
          "html",
          "javascript",
          "javascriptreact",
          "less",
          "sass",
          "scss",
          "pug",
          "typescriptreact",
          "vue",
          "angular",
          "php",
        },
      },
      -- Autres serveurs de langage que vous souhaitez utiliser
      lua_ls = {
        settings = {
          Lua = {
            diagnostics = {
              globals = { "vim" },
            },
            workspace = {
              library = vim.api.nvim_get_runtime_file("", true),
            },
          },
        },
      },
      -- Ajoutez ici les configurations pour d'autres serveurs (Python, Go, etc.)
    },
    -- Configuration pour désactiver tsserver dans les fichiers Vue (si nécessaire)
    setup = {
      -- tsserver = function(_, opts)
      --   opts.filetypes = opts.filetypes or {}
      --   -- Retirez 'vue' de la liste des filetypes gérés par tsserver
      --   opts.filetypes = vim.tbl_filter(function(ft)
      --     return ft ~= "vue"
      --   end, opts.filetypes)
      --   return true -- Retournez false pour que lspconfig continue la configuration
      -- end,
      tsserver = function()
        -- disable tsserver
        return true
      end,
      ts_ls = function()
        -- disable tsserver
        return true
      end,
      angularls = function(_, opts)
        require("lspconfig").angularls.setup(vim.tbl_extend("force", opts, {
          on_attach = function(client, bufnr)
            -- Désactiver la fonctionnalité de renommage si nécessaire
            client.server_capabilities.renameProvider = false

            -- Ajouter d'autres configurations on_attach ici
            vim.api.nvim_buf_set_keymap(
              bufnr,
              "n",
              "gd",
              "<cmd>lua vim.lsp.buf.definition()<CR>",
              { noremap = true, silent = true }
            )
            vim.api.nvim_buf_set_keymap(
              bufnr,
              "n",
              "gr",
              "<cmd>lua vim.lsp.buf.references()<CR>",
              { noremap = true, silent = true }
            )
          end,
        }))
      end,
      volar = function(_, opts)
        opts.on_attach = function(client, bufnr)
          if client.name == "volar" then
            require("nvim-navic").attach(client, bufnr)
          end
        end
        return true
      end,
    },
  },
  vtsls = function(_, opts)
    LazyVim.lsp.on_attach(function(client, buffer)
      client.commands["_typescript.moveToFileRefactoring"] = function(command, ctx)
        ---@type string, string, lsp.Range
        local action, uri, range = unpack(command.arguments)

        local function move(newf)
          client.request("workspace/executeCommand", {
            command = command.command,
            arguments = { action, uri, range, newf },
          })
        end

        local fname = vim.uri_to_fname(uri)
        client.request("workspace/executeCommand", {
          command = "typescript.tsserverRequest",
          arguments = {
            "getMoveToRefactoringFileSuggestions",
            {
              file = fname,
              startLine = range.start.line + 1,
              startOffset = range.start.character + 1,
              endLine = range["end"].line + 1,
              endOffset = range["end"].character + 1,
            },
          },
        }, function(_, result)
          ---@type string[]
          local files = result.body.files
          table.insert(files, 1, "Enter new path...")
          vim.ui.select(files, {
            prompt = "Select move destination:",
            format_item = function(f)
              return vim.fn.fnamemodify(f, ":~:.")
            end,
          }, function(f)
            if f and f:find("^Enter new path") then
              vim.ui.input({
                prompt = "Enter move destination:",
                default = vim.fn.fnamemodify(fname, ":h") .. "/",
                completion = "file",
              }, function(newf)
                return newf and move(newf)
              end)
            elseif f then
              move(f)
            end
          end)
        end)
      end
    end, "vtsls")
    -- copy typescript settings to javascript
    opts.settings.javascript =
      vim.tbl_deep_extend("force", {}, opts.settings.typescript, opts.settings.javascript or {})
  end,
  config = function(_, opts)
    -- Configuration LSP standard pour LazyVim
    local capabilities = require("cmp_nvim_lsp").default_capabilities(vim.lsp.protocol.make_client_capabilities())

    -- Appliquer les capacités à tous les serveurs LSP
    for server, server_opts in pairs(opts.servers) do
      server_opts.capabilities = vim.tbl_deep_extend("force", capabilities, server_opts.capabilities or {})
    end

    require("lspconfig.configs").angularls = {
      default_config = {
        cmd = opts.servers.angularls.cmd,
        filetypes = { "typescript", "html", "typescriptreact", "typescript.tsx" },
        root_dir = require("lspconfig.util").root_pattern("angular.json"),
      },
    }
  end,
}
